# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: "[2 - Action Full CD]" # CI/CD Pipeline - C# (.NET) 

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write   

jobs:
  # 1. Build e Testes
  build-and-tests:
    runs-on: ubuntu-latest
    outputs:
      coverage-report-path: ${{ steps.set-coverage-path.outputs.coverage-report-path }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restaurar dependências
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Rodar Testes com cobertura
        run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Listar arquivos de cobertura gerados
        run: |
          echo "Arquivos encontrados em ./TestResults:"
          find ./TestResults

      - name: Converter cobertura para formato OpenCover
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.6
        with:
          reports: ./TestResults/**/*.cobertura.xml
          targetdir: ./TestResults/CoverageReport
          reporttypes: 'opencover'

      - name: Listar arquivos após conversão
        run: |
          echo "Arquivos encontrados em ./TestResults/CoverageReport:"
          find ./TestResults/CoverageReport

      - name: Definir caminho do relatório de cobertura
        id: set-coverage-path
        run: |
          if [ -f ./TestResults/CoverageReport/coverage.opencover.xml ]; then
            echo "coverage-report-path=./TestResults/CoverageReport/coverage.opencover.xml" >> $GITHUB_OUTPUT
          else
            echo "Arquivo de cobertura não encontrado!"
            exit 1
          fi

      - name: Upload cobertura de teste
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ./TestResults/CoverageReport/coverage.opencover.xml

  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: build-and-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Baixar cobertura de teste
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: ./TestResults/CoverageReport

      - name: Instalar dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner begin \
            /k:"mana-food-clean-architecture" \
            /o:"mana-food" \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /d:sonar.login="$SONAR_TOKEN" \
            /d:sonar.projectBaseDir="." \
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/*.dll,**/*.exe" \
            /d:sonar.cs.opencover.reportsPaths="TestResults/CoverageReport/coverage.opencover.xml"
          dotnet build --no-incremental
          dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"
